<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
namespace <#= _context.NamespacePath #>
{
    /// <summary>
    /// <#= _context.ClassNameJapanese #>
    /// </summary>
    public record class <#= _context.ClassNameEnglish #>
    {
        #region Fields

        /// <summary>
        /// デフォルト
        /// </summary>
        public static readonly <#= _context.ClassNameEnglish #> Default = new(string.Empty);

        #endregion

        #region Constructors

        /// <summary>
        /// <#= _context.ClassNameJapanese #>を初期化します。
        /// </summary>
        /// <param name="value">値</param>
        private <#= _context.ClassNameEnglish #>(string value)
        {
            Value = value;
        }

        #endregion

        #region Properties

        /// <summary>
        /// 値を取得します。
        /// </summary>
        public string Value { get; }

        #endregion

        #region Methods

        /// <summary>
        /// 文字列を解析します。
        /// </summary>
        /// <param name="s">文字列</param>
        /// <returns>解析した結果を返します。</returns>
        public static <#= _context.ClassNameEnglish #> Parse(string s)
        {
            if (s is null) throw new ArgumentNullException(nameof(s));

            bool success = Validate(s, out var message);
            if (!success) throw new ArgumentException(message, nameof(s));

            <#= _context.ClassNameEnglish #> result = new(s);

            return result;
        }

        /// <summary>
        /// 文字列を解析します。
        /// </summary>
        /// <param name="s">文字列</param>
        /// <param name="result">結果</param>
        /// <returns>解析に成功した場合は、 <c>true</c>。それ以外の場合は、 <c>false</c>。</returns>
        public static bool TryParse(string s, out <#= _context.ClassNameEnglish #> result)
        {
            return TryParse(s, out result, out _);
        }

        /// <summary>
        /// 文字列を解析します。
        /// </summary>
        /// <param name="s">文字列</param>
        /// <param name="result">結果</param>
        /// <param name="message">メッセージ</param>
        /// <returns>解析に成功した場合は、 <c>true</c>。それ以外の場合は、 <c>false</c>。</returns>
        public static bool TryParse(string s, out <#= _context.ClassNameEnglish #> result, out string message)
        {
            if (s is null)
            {
                result = Default;
                message = "文字列が無効です。";
                return false;
            }

            bool success = Validate(s, out message);
            if (success)
            {
                result = new <#= _context.ClassNameEnglish #>(s);
            }
            else
            {
                result = Default;
            }

            return success;
        }

        /// <summary>
        /// 文字列を検証します。
        /// </summary>
        /// <param name="s">文字列</param>
        /// <param name="message">メッセージ</param>
        /// <returns>検証に成功した場合は、 <c>true</c>。それ以外の場合は、 <c>false</c>。</returns>
        private static bool Validate(string s, out string message)
        {
            bool success = s.Length <= <#= _context.MaximumLength #>;

            if (success)
            {
                message = string.Empty;
            }
            else
            {
                message = "<#= _context.ClassNameJapanese #>は、<#= _context.MaximumLength #>桁以下で入力してください。";
            }

            return success;
        }

        #endregion
    }
}