<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<# foreach (string path in _context.Usings) { #>
using <#= path #>;
<# } #>
<# if (_context.Usings.Any()) { #>

<# } #>
namespace <#= _context.NamespacePath #>
{
    /// <summary>
    /// <#= _context.ClassNameJapanese #>
    /// </summary>
	public class <#= _context.ClassNameEnglish #> : IEquatable<<#= _context.ClassNameEnglish #>>
	{
		#region Constructors

		/// <summary>
		/// <#= _context.ClassNameJapanese #>を初期化します。
		/// </summary>
<# foreach (EntityContextProperty property in _context.Properties) { #>
		/// <param name="<#= property.ConstructorParameterName #>"><#= property.PropertyNameJapanese #></param>
<# } #>
		public <#= _context.ClassNameEnglish #>(<#= string.Join(", ", _context.Properties.Select(x => $"{x.TypeName} {x.ConstructorParameterName}")) #>)
		{
<# foreach (EntityContextProperty property in _context.Properties) { #>
			<#= property.PropertyNameEnglish #> = <#= property.ConstructorParameterName #>;
<# } #>
		}

		#endregion

        #region Operators

        /// <summary>
        /// オペランドが等しい場合には <c>true</c> を返し、それ以外の場合は <c>false</c> を返します。
        /// </summary>
        /// <param name="lhs">左辺</param>
        /// <param name="rhs">右辺</param>
        /// <returns>オペランドが等しい場合は、 <c>true</c>。それ以外の場合は、 <c>false</c>。</returns>
        public static bool operator ==(<#= _context.ClassNameEnglish #> lhs, <#= _context.ClassNameEnglish #> rhs)
        {
            if (lhs is null) return rhs is null;

            bool result = lhs.Equals(rhs);

            return result;
        }

        /// <summary>
        /// オペランドが等しくない場合には <c>true</c> を返し、それ以外の場合は <c>false</c> を返します。
        /// </summary>
        /// <param name="lhs">左辺</param>
        /// <param name="rhs">右辺</param>
        /// <returns>オペランドが等しくない場合は、 <c>true</c>。それ以外の場合は、 <c>false</c>。</returns>
        public static bool operator !=(<#= _context.ClassNameEnglish #> lhs, <#= _context.ClassNameEnglish #> rhs)
        {
            bool result = !(lhs == rhs);

            return result;
        }

        #endregion

		#region Properties

<# foreach (EntityContextProperty property in _context.Properties) { #>
		/// <summary>
		/// <#= property.PropertyNameJapanese #>を取得します。
		/// </summary>
		public <#= property.TypeName #> <#= property.PropertyNameEnglish #> { get; }

<# } #>
		#endregion
		
        #region Methods
        
        /// <summary>
        /// 指定されたオブジェクトが現在のオブジェクトと等しいかどうかを判断します。
        /// </summary>
        /// <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
        /// <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        public override bool Equals(object? obj)
        {
            bool result = obj switch
            {
                <#= _context.ClassNameEnglish #> other => Equals(other),
                _ => base.Equals(obj),
            };

            return result;
        }

        /// <summary>
        /// 現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを示します。
        /// </summary>
        /// <param name="other">このオブジェクトと比較するオブジェクト。</param>
        /// <returns>現在のオブジェクトが <c>other</c> パラメーターと等しい場合は <c>true</c>、それ以外の場合は <c>false</c> です。</returns>
        public bool Equals(<#= _context.ClassNameEnglish #>? other)
        {
            if (other is null) return false;

            bool result = <#= string.Join(" && ", _context.Properties.Where(property => property.IsPrimaryKey).Select(property => $"{property.PropertyNameEnglish} == other.{property.PropertyNameEnglish}")) #>;

            return result;
        }

        /// <summary>
        /// 既定のハッシュ関数として機能します。
        /// </summary>
        /// <returns>現在のオブジェクトのハッシュ コード。</returns>
        public override int GetHashCode()
        {
            int result = HashCode.Combine(<#= string.Join(", ", _context.Properties.Where(property => property.IsPrimaryKey).Select(property => property.PropertyNameEnglish)) #>);

            return result;
        }

        /// <summary>
        /// 現在のオブジェクトを表す文字列を返します。
        /// </summary>
        /// <returns>現在のオブジェクトを表す文字列。</returns>
        public override string ToString()
		{
			return $"{nameof(<#= _context.ClassNameEnglish #>)} {{ <#= string.Join(", ", _context.Properties.Select(x => $"{{nameof({x.PropertyNameEnglish})}} = {{{x.PropertyNameEnglish}}}")) #> }}";
		}

		#endregion
	}
}