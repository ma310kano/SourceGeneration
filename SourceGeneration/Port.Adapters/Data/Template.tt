<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<# foreach (string path in _context.Usings) { #>
using <#= path #>;
<# } #>
<# if (_context.Usings.Any()) { #>

<# } #>
namespace <#= _context.NamespacePath #>
{
    /// <summary>
    /// <#= _context.ClassNameJapanese #>
    /// </summary>
	public class <#= _context.ClassNameEnglish #>
	{
		#region Constructors

		/// <summary>
		/// <#= _context.ClassNameJapanese #>を初期化します。
		/// </summary>
<# foreach (PropertyContext property in _context.Properties) { #>
		/// <param name="<#= property.ConstructorParameterName #>"><#= property.PropertyNameJapanese #></param>
<# } #>
		public <#= _context.ClassNameEnglish #>(<#= string.Join(", ", _context.Properties.Select(x => $"{x.TypeName} {x.ConstructorParameterName}")) #>)
		{
<# foreach (PropertyContext property in _context.Properties) { #>
			<#= property.PropertyNameEnglish #> = <#= property.ConstructorParameterName #>;
<# } #>
		}

		#endregion

		#region Properties

<# foreach (PropertyContext property in _context.Properties) { #>
		/// <summary>
		/// <#= property.PropertyNameJapanese #>を取得します。
		/// </summary>
		public <#= property.TypeName #> <#= property.PropertyNameEnglish #> { get; }

<# } #>
		#endregion
		
        #region Methods

        /// <summary>
        /// 現在のオブジェクトを表す文字列を返します。
        /// </summary>
        /// <returns>現在のオブジェクトを表す文字列。</returns>
        public override string ToString()
		{
			return $"{nameof(<#= _context.ClassNameEnglish #>)} {{ <#= string.Join(", ", _context.Properties.Select(x => $"{{nameof({x.PropertyNameEnglish})}} = {{{x.PropertyNameEnglish}}}")) #> }}";
		}

		#endregion
	}
}