<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
using System.Text.RegularExpressions;

namespace <#= _context.NamespacePath #>
{
    /// <summary>
    /// <#= _context.ClassNameJapanese #>
    /// </summary>
    public record class <#= _context.ClassNameEnglish #>
    {
        #region Constructors

        /// <summary>
        /// <#= _context.ClassNameJapanese #>を初期化します。
        /// </summary>
        /// <param name="value">値</param>
        private <#= _context.ClassNameEnglish #>(string value)
        {
            Value = value;
        }

        #endregion

        #region Properties

        /// <summary>
        /// 値を取得します。
        /// </summary>
        public string Value { get; }

        #endregion
        
        #region Methods

        /// <summary>
        /// <#= _context.ClassNameJapanese #>を作成します。
        /// </summary>
        /// <returns>作成した<#= _context.ClassNameJapanese #>を返します。</returns>
        public static <#= _context.ClassNameEnglish #> Create()
        {
            <#= _context.ClassNameEnglish #> product;
            {
                string value = Guid.NewGuid().ToString();
                product = new <#= _context.ClassNameEnglish #>(value);
            }

            return product;
        }

        /// <summary>
        /// 文字列を解析し、<#= _context.ClassNameJapanese #>を作成します。
        /// </summary>
        /// <param name="s">文字列</param>
        /// <returns>作成した<#= _context.ClassNameJapanese #>を返します。</returns>
        /// <exception cref="ArgumentNullException"><c>s</c> が <c>null</c> です。</exception>
        /// <exception cref="ArgumentException">検証に失敗しました。</exception>
        public static <#= _context.ClassNameEnglish #> Parse(string s)
        {
            if (s is null) throw new ArgumentNullException(nameof(s));

            bool isSucceeded = Validate(s, out string message);
            if (!isSucceeded) throw new ArgumentException(message, nameof(s));

            <#= _context.ClassNameEnglish #> product = new(s);
            return product;
        }

        /// <summary>
        /// 文字列を解析し、<#= _context.ClassNameJapanese #>を作成します。
        /// </summary>
        /// <param name="s">文字列</param>
        /// <param name="result">結果</param>
        /// <returns>解析に成功した場合は、 <c>true</c>。それ以外の場合は、<c>false</c>。</returns>
        public static bool TryParse(string s, out <#= _context.ClassNameEnglish #>? result)
        {
            bool isSucceeded = TryParse(s, out result, out _);
            return isSucceeded;
        }
        
        /// <summary>
        /// 文字列を解析し、<#= _context.ClassNameJapanese #>を作成します。
        /// </summary>
        /// <param name="s">文字列</param>
        /// <param name="result">結果</param>
        /// <param name="message">メッセージ</param>
        /// <returns>解析に成功した場合は、 <c>true</c>。それ以外の場合は、<c>false</c>。</returns>
        public static bool TryParse(string s, out <#= _context.ClassNameEnglish #>? result, out string message)
        {
            if (s is null)
            {
                result = null;
                message = $"{nameof(s)} が null です。";
                return false;
            }

            bool isSucceeded = Validate(s, out message);
            
            if (isSucceeded)
            {
                result = new <#= _context.ClassNameEnglish #>(s);
            }
            else
            {
                result = null;
            }

            return isSucceeded;
        }

        /// <summary>
        /// 文字列を検証します。
        /// </summary>
        /// <param name="s">文字列</param>
        /// <param name="message">メッセージ</param>
        /// <returns>検証に成功した場合は、 <c>true</c>。それ以外の場合は、 <c>false</c>。</returns>
        private static bool Validate(string s, out string message)
        {
            bool isValid;
            {
                const string pattern = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$";
                isValid = Regex.IsMatch(s, pattern);
            }

            if (isValid)
            {
                message = "検証に成功しました。";
            }
            else
            {
                message = "<#= _context.ClassNameJapanese #>は、UUID形式で入力してください。";
            }

            return isValid;
        }

        #endregion
    }
}