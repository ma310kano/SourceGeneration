<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
using System.Text.RegularExpressions;

namespace <#= _context.NamespacePath #>
{
    /// <summary>
    /// <#= _context.ClassNameJapanese #>
    /// </summary>
    public record class <#= _context.ClassNameEnglish #>
    {
        #region Fields

        /// <summary>
        /// デフォルト
        /// </summary>
        public static readonly <#= _context.ClassNameEnglish #> Default = new("00000000-0000-0000-0000-000000000000");

        #endregion

        #region Constructors

        /// <summary>
        /// <#= _context.ClassNameJapanese #>を初期化します。
        /// </summary>
        /// <param name="value">値</param>
        public <#= _context.ClassNameEnglish #>(string value)
        {
            bool success = Validate(value, out string message);
            if (!success) throw new ArgumentException(message, nameof(value));

            Value = value;
        }

        #endregion

        #region Properties

        /// <summary>
        /// 値を取得します。
        /// </summary>
        public string Value { get; }

        #endregion
        
        #region Methods

        /// <summary>
        /// <#= _context.ClassNameJapanese #>を作成します。
        /// </summary>
        /// <returns>作成した<#= _context.ClassNameJapanese #>を返します。</returns>
        public static <#= _context.ClassNameEnglish #> Create()
        {
            <#= _context.ClassNameEnglish #> product;
            {
                string value = Guid.NewGuid().ToString();
                product = new <#= _context.ClassNameEnglish #>(value);
            }

            return product;
        }

        /// <summary>
        /// 文字列を検証します。
        /// </summary>
        /// <param name="s">文字列</param>
        /// <param name="message">メッセージ</param>
        /// <returns>検証に成功した場合は、 <c>true</c>。それ以外の場合は、 <c>false</c>。</returns>
        public static bool Validate(string s, out string message)
        {
            bool success;
            {
                const string pattern = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$";
                success = Regex.IsMatch(s, pattern);
            }

            if (success)
            {
                message = string.Empty;
            }
            else
            {
                message = "<#= _context.ClassNameJapanese #>は、UUID形式で入力してください。";
            }

            return success;
        }

        #endregion
    }
}